- name: apt update
  become: true
  apt:
    update_cache: yes


- name: Install packages
  become: true
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gpg
  retries: 5
  delay: 15
  until: apt_result is succeeded
  register: apt_result


- name: Get Ubuntu codename
  command: lsb_release -cs
  become: true
  register: ubuntu_codename


- name: Ensure /etc/apt/keyrings directory exists
  become: true
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'


- name: Download Docker GPG key
  become: true
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'


- name: Set Docker architecture variable
  become: true
  set_fact:
    docker_arch: >-
      {% if ansible_architecture == 'x86_64' %}amd64{% elif ansible_architecture in ['aarch64', 'arm64'] %}arm64{% else %}{{ ansible_architecture | lower }}{% endif %}


- name: Add Docker apt repository
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ docker_arch }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    filename: "docker"
    state: present
    update_cache: yes


- name: Download Kubernetes GPG key (ASCII armored)
  become: true
  ansible.builtin.get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
    mode: '0644'


- name: Convert Kubernetes GPG key to dearmored format
  become: true
  shell: |
    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /etc/apt/keyrings/kubernetes-apt-keyring.asc
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg


- name: Add Kubernetes apt repository
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ k8s_install_version }}/deb/ /"
    filename: "kubernetes"
    state: present
    update_cache: yes


- name: Install containerd
  become: true
  apt:
    name: containerd.io
    state: present
    update_cache: yes


- name: Enable and restart Containerd
  become: true
  systemd:
    name: containerd
    enabled: yes
    state: restarted


- name: Install kubeadm, kubelet, kubectl
  become: true
  apt:
    name:
      - kubeadm={{ kubeadm_version }}
      - kubelet={{ kubelet_version }}
      - kubectl={{ kubectl_version }}
    state: present
    update_cache: yes


- name: Hold Kubernetes packages at current version
  become: true
  apt:
    name:
      - kubelet={{ kubelet_version }}
      - kubeadm={{ kubeadm_version }}
      - kubectl={{ kubectl_version }}
    state: present
    update_cache: yes
    allow_unauthenticated: yes
    force: yes
    autoremove: no
    install_recommends: no
    dpkg_options: "--force-confdef --force-confold"
  register: kubernetes_install


- name: Mark Kubernetes packages on hold
  become: true
  shell: |
    apt-mark hold kubelet kubeadm kubectl


- name: Swap 비활성화 및 fstab 주석 처리
  become: true
  block:
    - name: Disable swap
      command: swapoff -a


    - name: Remove swap entry from /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*\\sswap\\s)'
        replace: '#\\1'


- name: iptables 및 커널/시스템 설정
  become: true
  block:
    - name: br_netfilter 커널 모듈 로드
      shell: modprobe br_netfilter


    - name: br_netfilter 모듈 영구 적용
      shell: echo "br_netfilter" | tee /etc/modules-load.d/k8s.conf


    - name: k8s용 sysctl 설정 파일 생성
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1


    - name: net.ipv4.ip_forward=1 주석 해제
      lineinfile:
        path: /etc/sysctl.conf
        regexp: '^#net\.ipv4\.ip_forward=1'
        line: 'net.ipv4.ip_forward=1'


    - name: net.ipv6.conf.all.forwarding=1 주석 해제
      lineinfile:
        path: /etc/sysctl.conf
        regexp: '^#net\.ipv4\.ip_forward=1'
        line: 'net.ipv6.conf.all.forwarding=1'


    - name: sysctl 설정 적용
      shell: sysctl --system


    - name: vm.max_map_count 설정 추가
      lineinfile:
        path: /etc/sysctl.conf
        line: 'vm.max_map_count=262144'
        insertafter: EOF


    - name: sysctl -p 적용
      shell: sysctl -p